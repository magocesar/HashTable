import Hash.LinearProbingHash;
import aux_proj.Aluno;
import Hash.DllHash;
import Hash.QuadraticProbingHash;


public class Comparador{
    
        private Aluno cesar = new Aluno(0, "Cesar");
        private Aluno joao = new Aluno(10, "Joao");
        private Aluno maria = new Aluno(11, "Maria");
        private Aluno pedro = new Aluno(127, "Pedro");
        private Aluno rodrigo = new Aluno(984, "Rodrigo");
        private Aluno ana = new Aluno(521, "Ana");
        private Aluno carla = new Aluno(735, "Carla");
        private Aluno david = new Aluno(452, "David");
        private Aluno evelyn = new Aluno(876, "Evelyn");
        private Aluno fernando = new Aluno(311, "Fernando");
        private Aluno gabriela = new Aluno(690, "Gabriela");
        private Aluno hugo = new Aluno(822, "Hugo");
        private Aluno isabela = new Aluno(573, "Isabela");
        private Aluno julio = new Aluno(145, "Julio");
        private Aluno karen = new Aluno(871, "Karen");
        private Aluno lucas = new Aluno(404, "Lucas");
        private Aluno marina = new Aluno(239, "Marina");
        private Aluno nathan = new Aluno(782, "Nathan");
        private Aluno olivia = new Aluno(356, "Olivia");
        private Aluno paulo = new Aluno(171, "Paulo");
        private Aluno alice = new Aluno(936, "Alice");
        private Aluno bruno = new Aluno(821, "Bruno");
        private Aluno clara = new Aluno(666, "Clara");
        private Aluno daniel = new Aluno(997, "Daniel");
        private Aluno elisa = new Aluno(458, "Elisa");
        private Aluno felipe = new Aluno(623, "Felipe");
        private Aluno gisele = new Aluno(333, "Gisele");
        private Aluno henrique = new Aluno(543, "Henrique");
        private Aluno isabel = new Aluno(298, "Isabel");
        private Aluno jorge = new Aluno(109, "Jorge");
        private Aluno karla = new Aluno(853, "Karla");
        private Aluno leandro = new Aluno(715, "Leandro");
        private Aluno marcela = new Aluno(618, "Marcela");
        private Aluno nelson = new Aluno(527, "Nelson");
        private Aluno olga = new Aluno(789, "Olga");
        private Aluno pedrao = new Aluno(600, "Pedrao");
        private Aluno quiteria = new Aluno(345, "Quiteria");
        private Aluno roberto = new Aluno(479, "Roberto");
        private Aluno silvia = new Aluno(234, "Silvia");
        private Aluno tiago = new Aluno(555, "Tiago");
        private Aluno samuel = new Aluno(123, "Samuel");
        private Aluno vitoria = new Aluno(876, "Vitoria");
        private Aluno xavier = new Aluno(432, "Xavier");
        private Aluno yasmin = new Aluno(567, "Yasmin");
        private Aluno zeca = new Aluno(789, "Zeca");
        private Aluno adriana = new Aluno(987, "Adriana");
        private Aluno breno = new Aluno(654, "Breno");
        private Aluno camila = new Aluno(321, "Camila");
        private Aluno davi = new Aluno(111, "Davi");
        private Aluno elaine = new Aluno(222, "Elaine");
        private Aluno fabio = new Aluno(333, "Fábio");
        private Aluno gabriel = new Aluno(444, "Gabriel");
        private Aluno helen = new Aluno(555, "Helen");
        private Aluno iago = new Aluno(666, "Iago");
        private Aluno juliana = new Aluno(777, "Juliana");
        private Aluno kauan = new Aluno(888, "Kauan");
        private Aluno lara = new Aluno(999, "Lara");
        private Aluno marcelo = new Aluno(1001, "Marcelo");
        private Aluno nadia = new Aluno(1002, "Nadia");
        private Aluno otto = new Aluno(1003, "Otto");
        private Aluno patricia = new Aluno(1004, "Patrícia");
        private Aluno queiroz = new Aluno(1005, "Queiroz");
        private Aluno renata = new Aluno(1006, "Renata");
        private Aluno santiago = new Aluno(1007, "Santiago");
        private Aluno talita = new Aluno(1008, "Talita");
        private Aluno uriel = new Aluno(1009, "Uriel");
        private Aluno vera = new Aluno(1010, "Vera");
        private Aluno william = new Aluno(1011, "William");
        private Aluno xenia = new Aluno(1012, "Xênia");
        private Aluno yago = new Aluno(1013, "Yago");
        private Aluno zaira = new Aluno(1014, "Zaira");
        private Aluno alberto = new Aluno(1015, "Alberto");
        private Aluno bianca = new Aluno(1016, "Bianca");
        private Aluno carlos = new Aluno(1017, "Carlos");
        private Aluno denise = new Aluno(1018, "Denise");
        private Aluno erico = new Aluno(1019, "Érico");
        private Aluno flavia = new Aluno(1020, "Flávia");
        

    public Comparador(){}

    private long DllHash(){

        DllHash hash = new DllHash(9, 0.75);

        long tempoInicial = System.nanoTime();

        //Inserções

        hash.inserir(cesar);
        hash.inserir(joao);
        hash.inserir(maria);
        hash.inserir(pedro);
        hash.inserir(rodrigo);
        hash.inserir(ana);
        hash.inserir(carla);
        hash.inserir(david);
        hash.inserir(evelyn);
        hash.inserir(fernando);
        hash.inserir(gabriela);
        hash.inserir(hugo);
        hash.inserir(isabela);
        hash.inserir(julio);
        hash.inserir(karen);
        hash.inserir(lucas);
        hash.inserir(marina);
        hash.inserir(nathan);
        hash.inserir(olivia);
        hash.inserir(paulo);
        hash.inserir(alice);
        hash.inserir(bruno);
        hash.inserir(clara);
        hash.inserir(daniel);
        hash.inserir(elisa);
        hash.inserir(felipe);
        hash.inserir(gisele);
        hash.inserir(henrique);
        hash.inserir(isabel);
        hash.inserir(jorge);
        hash.inserir(karla);
        hash.inserir(leandro);
        hash.inserir(marcela);
        hash.inserir(nelson);
        hash.inserir(olga);
        hash.inserir(pedrao);
        hash.inserir(quiteria);
        hash.inserir(roberto);
        hash.inserir(silvia);
        hash.inserir(tiago);
        hash.inserir(samuel);
        hash.inserir(vitoria);
        hash.inserir(xavier);
        hash.inserir(yasmin);
        hash.inserir(zeca);
        hash.inserir(adriana);
        hash.inserir(breno);
        hash.inserir(camila);
        hash.inserir(davi);
        hash.inserir(elaine);
        hash.inserir(fabio);
        hash.inserir(gabriel);
        hash.inserir(helen);
        hash.inserir(iago);
        hash.inserir(juliana);
        hash.inserir(kauan);
        hash.inserir(lara);
        hash.inserir(marcelo);
        hash.inserir(nadia);
        hash.inserir(otto);
        hash.inserir(patricia);
        hash.inserir(queiroz);
        hash.inserir(renata);
        hash.inserir(santiago);
        hash.inserir(talita);
        hash.inserir(uriel);
        hash.inserir(vera);
        hash.inserir(william);
        hash.inserir(xenia);
        hash.inserir(yago);
        hash.inserir(zaira);
        hash.inserir(alberto);
        hash.inserir(bianca);
        hash.inserir(carlos);
        hash.inserir(denise);
        hash.inserir(erico);
        hash.inserir(flavia);

        //Buscas

        hash.buscar(cesar.getId());
        hash.buscar(joao.getId());
        hash.buscar(maria.getId());
        hash.buscar(pedro.getId());
        hash.buscar(rodrigo.getId());
        hash.buscar(ana.getId());
        hash.buscar(carla.getId());
        hash.buscar(david.getId());
        hash.buscar(evelyn.getId());
        hash.buscar(fernando.getId());
        hash.buscar(gabriela.getId());
        hash.buscar(hugo.getId());
        hash.buscar(isabela.getId());
        hash.buscar(julio.getId());
        hash.buscar(karen.getId());
        hash.buscar(lucas.getId());
        hash.buscar(marina.getId());
        hash.buscar(nathan.getId());
        hash.buscar(olivia.getId());
        hash.buscar(paulo.getId());
        hash.buscar(alice.getId());
        hash.buscar(bruno.getId());
        hash.buscar(clara.getId());
        hash.buscar(daniel.getId());
        hash.buscar(elisa.getId());
        hash.buscar(felipe.getId());
        hash.buscar(gisele.getId());
        hash.buscar(henrique.getId());
        hash.buscar(isabel.getId());
        hash.buscar(jorge.getId());
        hash.buscar(karla.getId());
        hash.buscar(leandro.getId());
        hash.buscar(marcela.getId());
        hash.buscar(nelson.getId());
        hash.buscar(olga.getId());
        hash.buscar(pedrao.getId());
        hash.buscar(quiteria.getId());
        hash.buscar(roberto.getId());
        hash.buscar(silvia.getId());
        hash.buscar(tiago.getId());
        hash.buscar(samuel.getId());
        hash.buscar(vitoria.getId());
        hash.buscar(xavier.getId());
        hash.buscar(yasmin.getId());
        hash.buscar(zeca.getId());
        hash.buscar(adriana.getId());
        hash.buscar(breno.getId());
        hash.buscar(camila.getId());
        hash.buscar(davi.getId());
        hash.buscar(elaine.getId());
        hash.buscar(fabio.getId());
        hash.buscar(gabriel.getId());
        hash.buscar(helen.getId());
        hash.buscar(iago.getId());
        hash.buscar(juliana.getId());
        hash.buscar(kauan.getId());
        hash.buscar(lara.getId());
        hash.buscar(marcelo.getId());
        hash.buscar(nadia.getId());
        hash.buscar(otto.getId());
        hash.buscar(patricia.getId());
        hash.buscar(queiroz.getId());
        hash.buscar(renata.getId());
        hash.buscar(santiago.getId());
        hash.buscar(talita.getId());
        hash.buscar(uriel.getId());
        hash.buscar(vera.getId());
        hash.buscar(william.getId());
        hash.buscar(xenia.getId());
        hash.buscar(yago.getId());
        hash.buscar(zaira.getId());
        hash.buscar(alberto.getId());
        hash.buscar(bianca.getId());
        hash.buscar(carlos.getId());
        hash.buscar(denise.getId());
        hash.buscar(erico.getId());
        hash.buscar(flavia.getId());


        //Remoções
        hash.remover(tiago.getId());
        hash.remover(silvia.getId());
        hash.remover(roberto.getId());
        hash.remover(quiteria.getId());
        hash.remover(pedrao.getId());
        hash.remover(olga.getId());
        hash.remover(olivia.getId());
        hash.remover(nathan.getId());

        long tempoFinal = System.nanoTime();

        return tempoFinal - tempoInicial;
    }

    private long LinearProbingHash(){

        LinearProbingHash hash = new LinearProbingHash(9, 0.75);

        long tempoInicial = System.nanoTime();

        //Inserções

        hash.inserir(cesar);
        hash.inserir(joao);
        hash.inserir(maria);
        hash.inserir(pedro);
        hash.inserir(rodrigo);
        hash.inserir(ana);
        hash.inserir(carla);
        hash.inserir(david);
        hash.inserir(evelyn);
        hash.inserir(fernando);
        hash.inserir(gabriela);
        hash.inserir(hugo);
        hash.inserir(isabela);
        hash.inserir(julio);
        hash.inserir(karen);
        hash.inserir(lucas);
        hash.inserir(marina);
        hash.inserir(nathan);
        hash.inserir(olivia);
        hash.inserir(paulo);
        hash.inserir(alice);
        hash.inserir(bruno);
        hash.inserir(clara);
        hash.inserir(daniel);
        hash.inserir(elisa);
        hash.inserir(felipe);
        hash.inserir(gisele);
        hash.inserir(henrique);
        hash.inserir(isabel);
        hash.inserir(jorge);
        hash.inserir(karla);
        hash.inserir(leandro);
        hash.inserir(marcela);
        hash.inserir(nelson);
        hash.inserir(olga);
        hash.inserir(pedrao);
        hash.inserir(quiteria);
        hash.inserir(roberto);
        hash.inserir(silvia);
        hash.inserir(tiago);
        hash.inserir(samuel);
        hash.inserir(vitoria);
        hash.inserir(xavier);
        hash.inserir(yasmin);
        hash.inserir(zeca);
        hash.inserir(adriana);
        hash.inserir(breno);
        hash.inserir(camila);
        hash.inserir(davi);
        hash.inserir(elaine);
        hash.inserir(fabio);
        hash.inserir(gabriel);
        hash.inserir(helen);
        hash.inserir(iago);
        hash.inserir(juliana);
        hash.inserir(kauan);
        hash.inserir(lara);
        hash.inserir(marcelo);
        hash.inserir(nadia);
        hash.inserir(otto);
        hash.inserir(patricia);
        hash.inserir(queiroz);
        hash.inserir(renata);
        hash.inserir(santiago);
        hash.inserir(talita);
        hash.inserir(uriel);
        hash.inserir(vera);
        hash.inserir(william);
        hash.inserir(xenia);
        hash.inserir(yago);
        hash.inserir(zaira);
        hash.inserir(alberto);
        hash.inserir(bianca);
        hash.inserir(carlos);
        hash.inserir(denise);
        hash.inserir(erico);
        hash.inserir(flavia);

        //Buscas

        hash.buscar(cesar.getId());
        hash.buscar(joao.getId());
        hash.buscar(maria.getId());
        hash.buscar(pedro.getId());
        hash.buscar(rodrigo.getId());
        hash.buscar(ana.getId());
        hash.buscar(carla.getId());
        hash.buscar(david.getId());
        hash.buscar(evelyn.getId());
        hash.buscar(fernando.getId());
        hash.buscar(gabriela.getId());
        hash.buscar(hugo.getId());
        hash.buscar(isabela.getId());
        hash.buscar(julio.getId());
        hash.buscar(karen.getId());
        hash.buscar(lucas.getId());
        hash.buscar(marina.getId());
        hash.buscar(nathan.getId());
        hash.buscar(olivia.getId());
        hash.buscar(paulo.getId());
        hash.buscar(alice.getId());
        hash.buscar(bruno.getId());
        hash.buscar(clara.getId());
        hash.buscar(daniel.getId());
        hash.buscar(elisa.getId());
        hash.buscar(felipe.getId());
        hash.buscar(gisele.getId());
        hash.buscar(henrique.getId());
        hash.buscar(isabel.getId());
        hash.buscar(jorge.getId());
        hash.buscar(karla.getId());
        hash.buscar(leandro.getId());
        hash.buscar(marcela.getId());
        hash.buscar(nelson.getId());
        hash.buscar(olga.getId());
        hash.buscar(pedrao.getId());
        hash.buscar(quiteria.getId());
        hash.buscar(roberto.getId());
        hash.buscar(silvia.getId());
        hash.buscar(tiago.getId());
        hash.buscar(samuel.getId());
        hash.buscar(vitoria.getId());
        hash.buscar(xavier.getId());
        hash.buscar(yasmin.getId());
        hash.buscar(zeca.getId());
        hash.buscar(adriana.getId());
        hash.buscar(breno.getId());
        hash.buscar(camila.getId());
        hash.buscar(davi.getId());
        hash.buscar(elaine.getId());
        hash.buscar(fabio.getId());
        hash.buscar(gabriel.getId());
        hash.buscar(helen.getId());
        hash.buscar(iago.getId());
        hash.buscar(juliana.getId());
        hash.buscar(kauan.getId());
        hash.buscar(lara.getId());
        hash.buscar(marcelo.getId());
        hash.buscar(nadia.getId());
        hash.buscar(otto.getId());
        hash.buscar(patricia.getId());
        hash.buscar(queiroz.getId());
        hash.buscar(renata.getId());
        hash.buscar(santiago.getId());
        hash.buscar(talita.getId());
        hash.buscar(uriel.getId());
        hash.buscar(vera.getId());
        hash.buscar(william.getId());
        hash.buscar(xenia.getId());
        hash.buscar(yago.getId());
        hash.buscar(zaira.getId());
        hash.buscar(alberto.getId());
        hash.buscar(bianca.getId());
        hash.buscar(carlos.getId());
        hash.buscar(denise.getId());
        hash.buscar(erico.getId());
        hash.buscar(flavia.getId());

        //Remoções
        hash.remover(tiago.getId());
        hash.remover(silvia.getId());
        hash.remover(roberto.getId());
        hash.remover(quiteria.getId());
        hash.remover(pedrao.getId());
        hash.remover(olga.getId());
        hash.remover(olivia.getId());
        hash.remover(nathan.getId());

        long tempoFinal = System.nanoTime();

        return tempoFinal - tempoInicial;
    }

    private long QuadraticProbingHash(){

        QuadraticProbingHash hash = new QuadraticProbingHash(9, 0.75);

        long tempoInicial = System.nanoTime();

        //Inserções

        hash.inserir(cesar);
        hash.inserir(joao);
        hash.inserir(maria);
        hash.inserir(pedro);
        hash.inserir(rodrigo);
        hash.inserir(ana);
        hash.inserir(carla);
        hash.inserir(david);
        hash.inserir(evelyn);
        hash.inserir(fernando);
        hash.inserir(gabriela);
        hash.inserir(hugo);
        hash.inserir(isabela);
        hash.inserir(julio);
        hash.inserir(karen);
        hash.inserir(lucas);
        hash.inserir(marina);
        hash.inserir(nathan);
        hash.inserir(olivia);
        hash.inserir(paulo);
        hash.inserir(alice);
        hash.inserir(bruno);
        hash.inserir(clara);
        hash.inserir(daniel);
        hash.inserir(elisa);
        hash.inserir(felipe);
        hash.inserir(gisele);
        hash.inserir(henrique);
        hash.inserir(isabel);
        hash.inserir(jorge);
        hash.inserir(karla);
        hash.inserir(leandro);
        hash.inserir(marcela);
        hash.inserir(nelson);
        hash.inserir(olga);
        hash.inserir(pedrao);
        hash.inserir(quiteria);
        hash.inserir(roberto);
        hash.inserir(silvia);
        hash.inserir(tiago);
        hash.inserir(samuel);
        hash.inserir(vitoria);
        hash.inserir(xavier);
        hash.inserir(yasmin);
        hash.inserir(zeca);
        hash.inserir(adriana);
        hash.inserir(breno);
        hash.inserir(camila);
        hash.inserir(davi);
        hash.inserir(elaine);
        hash.inserir(fabio);
        hash.inserir(gabriel);
        hash.inserir(helen);
        hash.inserir(iago);
        hash.inserir(juliana);
        hash.inserir(kauan);
        hash.inserir(lara);
        hash.inserir(marcelo);
        hash.inserir(nadia);
        hash.inserir(otto);
        hash.inserir(patricia);
        hash.inserir(queiroz);
        hash.inserir(renata);
        hash.inserir(santiago);
        hash.inserir(talita);
        hash.inserir(uriel);
        hash.inserir(vera);
        hash.inserir(william);
        hash.inserir(xenia);
        hash.inserir(yago);
        hash.inserir(zaira);
        hash.inserir(alberto);
        hash.inserir(bianca);
        hash.inserir(carlos);
        hash.inserir(denise);
        hash.inserir(erico);
        hash.inserir(flavia);

        //Buscas

        hash.buscar(cesar.getId());
        hash.buscar(joao.getId());
        hash.buscar(maria.getId());
        hash.buscar(pedro.getId());
        hash.buscar(rodrigo.getId());
        hash.buscar(ana.getId());
        hash.buscar(carla.getId());
        hash.buscar(david.getId());
        hash.buscar(evelyn.getId());
        hash.buscar(fernando.getId());
        hash.buscar(gabriela.getId());
        hash.buscar(hugo.getId());
        hash.buscar(isabela.getId());
        hash.buscar(julio.getId());
        hash.buscar(karen.getId());
        hash.buscar(lucas.getId());
        hash.buscar(marina.getId());
        hash.buscar(nathan.getId());
        hash.buscar(olivia.getId());
        hash.buscar(paulo.getId());
        hash.buscar(alice.getId());
        hash.buscar(bruno.getId());
        hash.buscar(clara.getId());
        hash.buscar(daniel.getId());
        hash.buscar(elisa.getId());
        hash.buscar(felipe.getId());
        hash.buscar(gisele.getId());
        hash.buscar(henrique.getId());
        hash.buscar(isabel.getId());
        hash.buscar(jorge.getId());
        hash.buscar(karla.getId());
        hash.buscar(leandro.getId());
        hash.buscar(marcela.getId());
        hash.buscar(nelson.getId());
        hash.buscar(olga.getId());
        hash.buscar(pedrao.getId());
        hash.buscar(quiteria.getId());
        hash.buscar(roberto.getId());
        hash.buscar(silvia.getId());
        hash.buscar(tiago.getId());
        hash.buscar(samuel.getId());
        hash.buscar(vitoria.getId());
        hash.buscar(xavier.getId());
        hash.buscar(yasmin.getId());
        hash.buscar(zeca.getId());
        hash.buscar(adriana.getId());
        hash.buscar(breno.getId());
        hash.buscar(camila.getId());
        hash.buscar(davi.getId());
        hash.buscar(elaine.getId());
        hash.buscar(fabio.getId());
        hash.buscar(gabriel.getId());
        hash.buscar(helen.getId());
        hash.buscar(iago.getId());
        hash.buscar(juliana.getId());
        hash.buscar(kauan.getId());
        hash.buscar(lara.getId());
        hash.buscar(marcelo.getId());
        hash.buscar(nadia.getId());
        hash.buscar(otto.getId());
        hash.buscar(patricia.getId());
        hash.buscar(queiroz.getId());
        hash.buscar(renata.getId());
        hash.buscar(santiago.getId());
        hash.buscar(talita.getId());
        hash.buscar(uriel.getId());
        hash.buscar(vera.getId());
        hash.buscar(william.getId());
        hash.buscar(xenia.getId());
        hash.buscar(yago.getId());
        hash.buscar(zaira.getId());
        hash.buscar(alberto.getId());
        hash.buscar(bianca.getId());
        hash.buscar(carlos.getId());
        hash.buscar(denise.getId());
        hash.buscar(erico.getId());
        hash.buscar(flavia.getId());

        //Remoções
        hash.remover(tiago.getId());
        hash.remover(silvia.getId());
        hash.remover(roberto.getId());
        hash.remover(quiteria.getId());
        hash.remover(pedrao.getId());
        hash.remover(olga.getId());
        hash.remover(olivia.getId());
        hash.remover(nathan.getId());

        long tempoFinal = System.nanoTime();

        return tempoFinal - tempoInicial;
    }

    public void iniciar(){

        System.out.println("Tempo de execução da DllHash: " + DllHash() + "ns");
        System.out.println("Tempo de execução da LinearProbingHash: " + LinearProbingHash() + "ns");
        System.out.println("Tempo de execução da QuadraticProbingHash: " + QuadraticProbingHash() + "ns");
    }
}